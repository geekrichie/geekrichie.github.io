<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>读书记录</title>
    <link href="/2022/05/05/%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/05/%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>   最近读书比较多，认认真真的刷了bitcast这篇论文，的确是很简单的存储模型，入门存储的首选<br>同样也阅读了hyperloglog算法的一些原理，花了挺长时间才弄懂大致的理论，虽然部分常数的推导过程<br>我是放弃了，不过也算比较了解了。<br>   分布式的东西最近也了解了一些，向量时钟和逻辑时钟的文章还需要好好看下。spanner论文我还没看了<br>数据密集型应用系统设计这本书也翻了翻，但是感觉都讲的好泛，想要了解的比较深入可能还得查看具体的论文<br>好好学了下es的底层原理，感觉的确中间件的底层原理其实都差不多，了解下怎么实现的就行。果然读了很多书<br>之后很多事情也慢慢想通了。<br>   leveldb的东西最近也开始看了，还有boltdb的具体实现也在慢慢推进。感觉学到的东西不写下来就很容易忘记<br>总是觉得网上反正很多人已经写了，我又何必再写，但是说真的网上的文章真不知道是对是错，浪费了大量的时间<br>在知识点的筛选上。<br>   算法的部分最近在看动手教你学深度学习这本书，这本书里面都有实例，目前看的pytorch版本，感觉往后推进<br>确实不容易。    </p>]]></content>
    
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时序数据库</title>
    <link href="/2022/03/11/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/03/11/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>记录下时序数据库相关的文章列表，供后续的仔细研究与学习</p><ol><li>从零实现一个时序数据库 (<a href="https://cloud.tencent.com/developer/article/1860626">https://cloud.tencent.com/developer/article/1860626</a>)</li><li>从头开始编写时序数据库 <a href="https://cloud.tencent.com/developer/article/1882949?from=article.detail.1860626">https://cloud.tencent.com/developer/article/1882949?from=article.detail.1860626</a></li><li>国人对prometheus的分析 <a href="https://www.cnblogs.com/alchemystar/tag/Prometheus/">https://www.cnblogs.com/alchemystar/tag/Prometheus/</a> </li><li>从零开始学习数据库 <a href="https://cstack.github.io/db_tutorial/">https://cstack.github.io/db_tutorial/</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>tsdb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试记录</title>
    <link href="/2022/03/09/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/09/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>整理下最近面试被问到的题目<br>面试岗位 golang后端开发工程师</p><h2 id="golang相关题目"><a href="#golang相关题目" class="headerlink" title="golang相关题目"></a>golang相关题目</h2><ol><li>GMP模型</li><li>slice的容量问题（高频题目）<br>var s []int{1,2,3,4,5} 往slice添加元素后，容量变成多少<br>x &#x3D; s[3:5] 此时x的len以及cap分别是多少<br>x &#x3D; append(x, 6)此时输出s是多少<br>x &#x3D; append(x, 7,8,9) 此时输出s是多少</li><li>map的扩容机制以及底层原理</li><li>channel的底层原理</li><li>sync.Map底层的数据结构</li><li>new和make的区别</li><li>golang的垃圾回收机制<br>三色标记法和混合写屏障</li><li>golang的内存分配机制</li><li>协程复用和非复用的多消费者和多生产者程序</li><li>创建两个空的slice，问地址一样吗？<br> 一样的，因为runtime.zerobase<br> 貌似底层会做处理，返回同一个地址</li><li>协程进程以及线程的区别</li><li>go的scheduler的工作机制</li><li>程序的内存布局<br>代码段，初始化的数据段，未初始的数据段以及堆段以及栈</li><li>string byte和rune<br>   var s string  s可能包含中文字符，直接输出len(s)输出的字节数<br>   转换成[]rune之后，再获取长度得到字符的数量<br>   for i, c :&#x3D;  range s 的时候获取到的是c是rune类型，i并不是从0顺序增加的<br>   而是根据字节的长度来增加的，i可能并不是从0，1，2，3，<br>   而是有可能是0，3，4，7 这种形式，需要了解utf8的编码方式</li><li>数组和切片区别</li><li>map的key可不可以是slice，可不可以是数组，为啥？<br>不可以是slice，可以是数组。为啥我后续再补充</li><li>系统调用的时候，G会发生什么？<br>G会和M绑定，但是P会和其他的M绑定，然后继续执行其他的G</li><li>CPU cache和page cache<br>一个是cpu缓存内存，一个内存缓存磁盘</li><li>go的网络模型<br>   一个协程处理一个连接</li></ol><h2 id="数据库的题目"><a href="#数据库的题目" class="headerlink" title="数据库的题目"></a>数据库的题目</h2><ol><li>给你一条sql，让你加索引<br>  这种需要问面试官问题，上来就回答的，肯定要挂<br>  主要在于思考字段的区分度，如果区分度小，没必要建立索引<br>  看字段能不能走覆盖索引</li><li>mysql的悲观锁和乐观锁</li><li>mysql的acid实现方式</li><li>redolog和binlog的两阶段提交（这个搞清楚为啥这么设计）</li></ol><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ol><li>字符串的底层结构是啥？<br> sds，如何保证二进制安全？这里我后来查找说是通过一个长度的字段，固定读取多少个字节</li><li>rdb和aof优缺点？</li><li>主从复制的原理</li><li>缓存击穿和缓存穿透以及缓存雪崩的应对策略</li><li>热key怎么处理？ 永不过期，或者均分到多个redis里面</li><li>内存淘汰策略</li><li>redis-cluster的原理，slot槽的迁移，以及增加节点会发生什么</li></ol><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><ol><li>高吞吐量的原因？</li></ol><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><ol><li>docker的原理<br>namespace和cgroup，最好是说的更细一点，面试官喜欢细节</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>CDN加速的原理<br>就近分配下载的节点</li><li>CDN资源怎么更新？</li><li>epoll的原理<br>红黑树加事件回调函数，添加到rdlist里面</li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>排序数组寻找第一个target的位置和最后一个target的位置<br>二分查找</li><li>一个先升序后降序的数组查找最大值<br>二分查找</li><li>两个数组查找最接近于target值的两个数，输出所有组合。<br>如果两个数相加等于target，距离就是0，<br>没有的话就输出两数之和最接近target的所有组合<br>先排序，然后一个指针指向第一个数组最左边，一个指针指向第二个数组最右边</li><li>求第k大的数<br>快速排序的算法</li><li>数组中无重复字符的最大长度<br> 双指针</li><li>二叉树求右视图？<br>广搜和深搜都可以</li><li>求一个集合的所有子集<br>深搜算法</li></ol><h2 id="系统设计题"><a href="#系统设计题" class="headerlink" title="系统设计题"></a>系统设计题</h2><p>一定要有问有答，要不然上来就设计肯定直接挂，<br>github有系统设计的项目可以学习下<br>B站也有相关的视频，学一些套路来回答面试官的问题</p><ol><li>设计一个存储系统<br> 系统设计题基本都得问面试官问题，你的dau有多少，上传的量有多少，下载的速度有多少，要下载多大的数据并计算下带宽以及存储的， 分块上传的策略，下载走不走CDN</li><li>设计一个短链接的系统<br> 先问有多少量？长连接有多少？估算需要多大的空间来存储<br> 读写占比？qps有多少？ 每个url假设100个byte，一天1000000的记录<br> 就是100Byte * 1000000&#x2F;86400  比特每s<br> 怎么判断url存不存在对应的短链接？<br> 可以通过布隆过滤器器设置?</li><li>设计信息流系统</li><li>设置消息通知系统</li><li>设计秒杀系统<br>怎么扣减库存，利用redis的incr和decr指令来完成库存扣减</li></ol><p>总结：需要有自己特别擅长的领域，跟面试官描述<br>不能什么都不精通，说自己什么都会其实就是什么都不会</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/09/hello-world/"/>
    <url>/2022/03/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
